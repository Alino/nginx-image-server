env SERVER_NAME;
env S3_HOST;

user root;
worker_processes 4;
daemon off;
#worker_rlimit_nofile
error_log /dev/stdout info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    #multi_accept on;
    #use
}

http {
    perl_modules perl/lib;
    perl_require validator.pm;

    perl_set $server_name_from_env 'sub { return $ENV{"SERVER_NAME"}; }';
    perl_set $s3_host_from_env 'sub { return $ENV{"S3_HOST"}; }';

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    #access_log off;
    access_log /dev/stdout;
    server_tokens off;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 65;

    gzip on;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_vary off;
    #gzip_buffers
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/rss+xml application/atom+xml text/javascript application/javascript application/json text/mathml;
    gzip_min_length  1000;
    gzip_disable     MSIE [1-6]\.;

    server_names_hash_bucket_size 64;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;
    #proxy_read_timeout
    #client_body_buffer_size
    #client_max_body_size

    limit_req_zone $binary_remote_addr zone=default:10m rate=1r/s;

    proxy_cache_path /var/www/nginx/cache levels=1:2 keys_zone=cache-space:4m max_size=50m inactive=120m;
    proxy_temp_path /var/www/nginx/tmp;

    server {
      listen 80;
      server_name $server_name_from_env;

      location ~ ^/(.+)$ {
        proxy_pass http://localhost:8080;
        proxy_cache cache-space;
        proxy_cache_valid 200 60m;
      }
    }

    server {
      listen 8080;
      server_name $server_name_from_env;
      resolver 8.8.8.8;
      small_light on;

      location @empty {
        empty_gif;
      }

      location /favicon.ico {
        empty_gif;
        access_log    off;
        log_not_found off;
      }

      # Image processing for images in local file
      location ~ ^/local/small_light[^/]*/(.+)$ {
        set $small_light_maximum_size 3072;
        perl validator::handler;
      }

      # Image processing for images in AWS S3
      location ~ ^/small_light[^/]*/(.+)$ {
        set $small_light_maximum_size 3072;
        perl validator::handler;
      }

      location ~ ^/images/(.+)$ {
        root /var/www/nginx;
        error_page 415 = @empty;
      }

      location ~ ^/(.+)$ {
        proxy_pass http://$s3_host_from_env/$1;
        error_page 415 = @empty;
      }
    }

    server {
      listen 8090;
      server_name $server_name_from_env;

      location /status {
        stub_status on;
        access_log off;
      }
    }

    server {
      client_max_body_size 10m;

      location @frontcontroller {
        rewrite ^ / last;
      }

      location /upload {
        # Pass altered request body to this location
        upload_pass   @frontcontroller;

        # Store files to this directory
        # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
        upload_store /var/tmp/fuploads 1;

        # Set the desired user permissions
        upload_store_access user:r group:r all:r;

        # Set specified fields in request body
        upload_set_form_field $upload_field_name.name "$upload_file_name";
        upload_set_form_field $upload_field_name.path "$upload_tmp_path";

        # Inform backend about hash and size of a file
        upload_aggregate_form_field $upload_field_name.sha1 "$upload_file_sha1";
        upload_aggregate_form_field $upload_field_name.size "$upload_file_size";

        # This directive specifies any extra POST fields which should be passed along.
        #upload_pass_form_field "^usession$";

        upload_cleanup 400 404 499 500-505;
      }
    }

    server {
      listen 8092;

      location / {
        proxy_pass http://127.0.0.1:8091;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
      }
    }

    include /etc/nginx/conf.d/*.conf;
}